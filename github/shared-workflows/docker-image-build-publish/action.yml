name: Docker Build & Publish
description: Build and publish docker images

inputs:
  dockerfile:
      default: ./Dockerfile
      description: Path to Dockerfile
  context:
      default: .
      description: Path to context
  image_names:
      required: true
      description: Space separated list of image names.
  tags:
      required: true
      description: space-separated list of additional image tags.
  push_dockerhub:
      required: false
      default: 'false' # ToDo: Change to  boolean when types are available in composite workflows
      description: Whether to push the image to Dockerhub.
  push_ghcr:
      required: false
      default: 'false' # ToDo: Change to  boolean when types are available in composite workflows
      description: Whether to push the image to GHCR.
  build_args:
      required: false
      default: ""
      description: space-separated list of build args.
  platforms:
      required: true
      description: comma-separated list of platforms.

outputs:
  image_digest:
      description: The image digest
      value: ${{ steps.docker_build.outputs.digest }}

runs:
  using: composite
  steps:
    - name: Prechecks
      shell: bash
      run: |
        if [[ "${{ inputs.push_dockerhub }}" == "true" ]]; then
          if [[ "${{ env.DOCKERHUB_PASSWORD }}" == "" ]]; then
            echo "DOCKERHUB_PASSWORD env is not set"
            exit 1
          fi

          if [[ "${{ env.DOCKERHUB_USERNAME }}" == "" ]]; then
            echo "DOCKERHUB_USERNAME env is not set"
            exit 1
          fi
        fi

        if [[ "${{ inputs.push_ghcr }}" == "true" ]]; then
          if [[ "${{ env.GITHUB_TOKEN }}" == "" ]]; then
            echo "GITHUB_TOKEN env is not set"
            exit 1
          fi
        fi

    - name: Checkout
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

    - name: Build newline separated args
      id: newlined-input
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      with:
        script: |
          core.setOutput('tags', `${{ inputs.tags }}`.split(" ").join("\n"))
          core.setOutput('image_names', `${{ inputs.image_names }}`.split(" ").join("\n"))
          core.setOutput('build_args', `${{ inputs.build_args }}`.split(" ").join("\n"))

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@31cebacef4805868f9ce9a0cb03ee36c32df2ac4 # v5.3.0
      with:
        images: ${{ steps.newlined-input.outputs.image_names }}
        tags: ${{ steps.newlined-input.outputs.tags }} 

    - name: Set up QEMU
      uses: docker/setup-qemu-action@68827325e0b33c7199eb31dd4e31fbe9023e06e3 # v3.0.0
      with:
        platforms: all

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

    - name: Cache Docker layers
      uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Login to DockerHub
      if: ${{ inputs.push_dockerhub == 'true' }}
      uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
      with:
        username: ${{ env.DOCKERHUB_USERNAME }}
        password: ${{ env.DOCKERHUB_PASSWORD }}

    - name: Login to GitHub Container Registry
      if: ${{ inputs.push_ghcr == 'true' }} 
      uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ env.GITHUB_TOKEN }}

    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@4a13e500e55cf31b7a5d59a38ab2040ab0f42f56 # v5.1.0
      with:
        file: ${{ inputs.dockerfile }}
        context: ${{ inputs.context }}
        builder: ${{ steps.buildx.outputs.name }}
        platforms: ${{ inputs.platforms }}
        push: ${{ inputs.push_dockerhub == 'true' || inputs.push_ghcr == 'true'}}
        tags: ${{ steps.meta.outputs.tags }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache
        build-args: ${{ steps.newlined-input.outputs.build_args }}

    - name: Image digest
      shell: bash
      run: echo ${{ steps.docker_build.outputs.digest }}
